- name: Create docker apps base directory
  become: true
  ansible.builtin.file:
    path: "{{ docker_apps_base_dir }}"
    state: directory
    mode: '0755'
- name: Get existing app directories
  become: true
  ansible.builtin.find:
    paths: "{{ docker_apps_base_dir }}"
    file_type: directory
  register: existing_apps
- name: Create directories for each app
  become: true
  ansible.builtin.file:
    path: "{{ docker_apps_base_dir }}/{{ item.name }}"
    state: directory
    mode: '0755'
  loop: "{{ docker_apps }}"
  when: item.enabled | default(true)
  no_log: true
- name: Check if app directories exist
  become: true
  ansible.builtin.stat:
    path: "{{ docker_apps_base_dir }}/{{ item.name }}/docker-compose.yml"
  loop: "{{ docker_apps }}"
  when: item.enabled | default(true)
  register: app_status
  no_log: true
- name: Deploy docker-compose files for apps
  become: true
  ansible.builtin.copy:
    content: "{{ item.compose_content | to_nice_yaml }}"
    dest: "{{ docker_apps_base_dir }}/{{ item.name }}/docker-compose.yml"
    mode: '0644'
  loop: "{{ docker_apps }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.enabled | default(true)
  register: compose_files
- name: Deploy docker apps
  become: true
  community.docker.docker_compose_v2:
    project_src: "{{ docker_apps_base_dir }}/{{ item.item.name }}"
    state: present
  loop: "{{ compose_files.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when:
    - not item.skipped | default(false)
    - item.item.enabled | default(true)
    - item.changed
- name: Stop undefined apps
  become: true
  ansible.builtin.shell: |
    cd "{{ item.path }}" && docker compose down --remove-orphans
  loop: "{{ existing_apps.files }}"
  when: item.path | basename not in (docker_apps | selectattr('enabled', 'equalto', true) | map(attribute='name') | list)
  register: stop_result
  changed_when: stop_result.rc == 0
- name: Remove undefined app directories
  become: true
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ existing_apps.files }}"
  when: item.path | basename not in (docker_apps | selectattr('enabled', 'equalto', true) | map(attribute='name') | list)
