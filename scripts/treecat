#!/usr/bin/env bash

# Function that uses "git check-ignore" to determine if a file or directory should be ignored
is_ignored() {
  local relative_path="$1"
  # The -q flag makes git check-ignore run in quiet mode and -C sets the base directory
  git -C "$BASE_DIR" check-ignore -q "$relative_path"
  return $?
}

# Function to traverse the directory and process each entry
traverse_directory() {
  local dir="$1"

  # Print the directory structure up to 2 levels deep
  echo "Directory structure ($dir):"
  tree -L 2 "$dir"

  # Iterate over each entry within the directory
  for entry in "$dir"/*; do
    # If the entry does not exist (e.g., empty directory), skip it
    [ -e "$entry" ] || continue

    # Calculate the relative path to BASE_DIR so that git check-ignore can evaluate it correctly
    local relative_path
    relative_path=$(realpath --relative-to="$BASE_DIR" "$entry")

    # Explicitly ignore the ".git" folder
    if [ "$(basename "$entry")" = ".git" ]; then
      continue
    fi

    # If the entry is ignored according to .gitignore, skip it
    if is_ignored "$relative_path"; then
      continue
    fi

    if [ -d "$entry" ]; then
      # If it's a directory, traverse it recursively
      traverse_directory "$entry"
    elif [ -f "$entry" ]; then
      local extension="${entry##*.}"
      echo "File: $relative_path"
      echo "\`\`\`$extension"
      cat "$entry"
      echo "\`\`\`"
    fi
  done
}

# Set BASE_DIR to the first argument or default to the current directory (.)
BASE_DIR="${1:-.}"

# Start traversing from BASE_DIR
traverse_directory "$BASE_DIR"
