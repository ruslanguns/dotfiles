#!/usr/bin/env bash
#
# Treecat - A quick directory tree and file content display tool.
#
# Usage:
#   treecat [-i ignore_pattern]... [BASE_DIR]
#
# Description:
#   Recursively prints a directory tree (up to 2 levels deep) and shows file contents in markdown format.
#   It automatically ignores the ".git" folder and files/directories specified in the project's .gitignore.
#   Use the -i flag (multiple times if needed) to ignore additional patterns.
#
# Example:
#   treecat -i "bin/*" -i "tmp" ~/Projects/ExampleProject/
#

# Array to store additional ignore paths specified via the -i flag
set -euo pipefail

need() { command -v "$1" >/dev/null 2>&1 || { echo "Error: '$1' not found" >&2; exit 1; }; }

need tree
need git
need realpath

EXTRA_IGNORES=()

# Parse command-line options: -i for additional paths to ignore
while getopts ":i:" opt; do
  case "$opt" in
  i)
    EXTRA_IGNORES+=("$OPTARG")
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    exit 1
    ;;
  esac
done
shift $((OPTIND - 1))

# Set BASE_DIR to the first positional argument or default to the current directory (.)
BASE_DIR="${1:-.}"

# Function that uses "git check-ignore" to determine if a file or directory should be ignored
is_ignored() {
  local relative_path="$1"
  if git -C "$BASE_DIR" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    git -C "$BASE_DIR" check-ignore -q "$relative_path"
    return $?
  else
    return 1
  fi
}

# Function to traverse the directory and process each entry
traverse_directory() {
  local dir="$1"

  echo "Directory structure ($dir):"
  tree -L 2 "$dir"

  # Iterate over each entry within the directory
  for entry in "$dir"/*; do
    [ -e "$entry" ] || continue

    local relative_path
    relative_path=$(realpath --relative-to="$BASE_DIR" "$entry")

    # Explicitly ignore the ".git" folder
    if [ "$(basename "$entry")" = ".git" ]; then
      continue
    fi

    # Skip if the entry matches any extra ignore patterns
    for ignore in "${EXTRA_IGNORES[@]}"; do
      if [[ "$relative_path" == $ignore ]]; then
        continue 2
      fi
    done

    # Skip if the entry is ignored according to .gitignore
    if is_ignored "$relative_path"; then
      continue
    fi

    if [ -d "$entry" ]; then
      traverse_directory "$entry"
    elif [ -f "$entry" ]; then
      local extension="${entry##*.}"
      echo "File: $relative_path"
      echo "\`\`\`$extension"
      cat "$entry"
      echo "\`\`\`"
    fi
  done
}

# Start traversing from BASE_DIR
traverse_directory "$BASE_DIR"
